import { type AxiosRequestConfig, type AxiosInstance } from 'axios';
import { type FetchAPIOptions } from './fetcher.js';
import { APIError } from './error.js';
import * as Errors from './error.js';
export type RequestOptions = Omit<AxiosRequestConfig, 'url' | 'method' | 'baseURL' | 'data' | 'responseType'> & Record<string, unknown>;
export interface ClientOptions {
    /** baseURL, default is https://api.coze.com, Use https://api.coze.cn if you use https://coze.cn */
    baseURL?: string;
    /** Personal Access Token (PAT) or OAuth2.0 token */
    token: string;
    /** see https://github.com/axios/axios?tab=readme-ov-file#request-config */
    axiosOptions?: RequestOptions;
    /** Custom axios instance */
    axiosInstance?: AxiosInstance | unknown;
    /** Whether to enable debug mode */
    debug?: boolean;
    /** Custom headers */
    headers?: Headers | Record<string, unknown>;
    /** Whether Personal Access Tokens (PAT) are allowed in browser environments */
    allowPersonalAccessTokenInBrowser?: boolean;
}
export declare class APIClient {
    protected _config: ClientOptions;
    baseURL: string;
    token: string;
    axiosOptions?: RequestOptions;
    axiosInstance?: AxiosInstance | unknown;
    debug: boolean;
    allowPersonalAccessTokenInBrowser: boolean;
    headers?: Headers | Record<string, unknown>;
    constructor(config: ClientOptions);
    static APIError: typeof APIError;
    static BadRequestError: typeof Errors.BadRequestError;
    static AuthenticationError: typeof Errors.AuthenticationError;
    static PermissionDeniedError: typeof Errors.PermissionDeniedError;
    static NotFoundError: typeof Errors.NotFoundError;
    static RateLimitError: typeof Errors.RateLimitError;
    static InternalServerError: typeof Errors.InternalServerError;
    static GatewayError: typeof Errors.GatewayError;
    static TimeoutError: typeof Errors.TimeoutError;
    static UserAbortError: typeof Errors.APIUserAbortError;
    protected buildOptions(method: 'GET' | 'POST' | 'PUT' | 'DELETE', body?: unknown, options?: RequestOptions): FetchAPIOptions;
    makeRequest<Req, Rsp>(apiUrl: string, method: 'GET' | 'POST' | 'PUT' | 'DELETE', body?: Req, isStream?: boolean, options?: RequestOptions): Promise<Rsp>;
    post<Req, Rsp>(apiUrl: string, body?: Req, isStream?: boolean, options?: RequestOptions): Promise<Rsp>;
    get<Req, Rsp>(apiUrl: string, param?: Req, isStream?: boolean, options?: RequestOptions): Promise<Rsp>;
    put<Req, Rsp>(apiUrl: string, body?: Req, isStream?: boolean, options?: RequestOptions): Promise<Rsp>;
    delete<Req, Rsp>(apiUrl: string, isStream?: boolean, options?: RequestOptions): Promise<Rsp>;
    getConfig(): ClientOptions;
    debugLog(...msgs: any[]): void;
}
